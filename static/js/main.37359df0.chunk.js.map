{"version":3,"sources":["store/index.ts","components/api/api.tsx","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["finishLoading","message","type","setTodos","todos","setUser","user","chooseUserId","userId","getIsLoaded","state","isLoaded","getSort","sort","getUser","setUserId","getInputChange","inputChange","initialState","loading","todoId","getSortTodos","filter","todo","completed","title","toLowerCase","includes","store","createStore","action","Math","random","map","id","composeWithDevTools","API_URL","todosFromServer","a","fetch","then","promise","json","result","data","userFromServer","TodoList","dispatch","useDispatch","filterTitle","useSelector","selectSort","className","name","placeholder","value","onChange","event","target","htmlFor","key","onClick","classNames","checked","readOnly","CurrentUser","selectedUserId","useEffect","fetchUser","email","phone","App","fetchTodos","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.37359df0.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { Todos, User } from '../components/interfaces';\n\n// Action types - is just a constant. MUST have a unique value.\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\nconst SORT_TODOS = 'SORT_TODOS';\nconst SET_TODOS = 'SET_TODOS'\nconst SET_USER = 'SET_USER'\n\nexport const RANDOMIZE = 'RANDOMIZE';\nexport const ALL = 'ALL'\nexport const COMPLETED = 'COMPLETED'\nexport const NOT_COMPLETED = 'NOT_COMPLETED'\nexport const REMOVE = 'REMOVE'\n\nexport const CHOOSE_USER_ID = 'CHOOSE_USER_ID';\nexport const CHECK_ON_COMPLETED_TODOS = 'CHECK_ON_COMPLETED_TODOS';\nexport const INPUT_CHANGE = 'INPUT_CHANGE'\n\n// Action creators - a function returning an action object\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = (message = 'No message') => ({ type: FINISH_LOADING, message });\n\nexport const setSort = (sort: string) => ({ type: SORT_TODOS, sort});\n\nexport const setTodos = (todos: Todos[]) => ({ type: SET_TODOS, todos});\nexport const setUser = (user: User) => ({ type: SET_USER, user});\nexport const randomize = () => ({ type: RANDOMIZE });\n\nexport const checkOnCompletedTodos = (todoId: number) => ({ type: CHECK_ON_COMPLETED_TODOS, todoId});\nexport const chooseUserId = (userId: number) => ({ type: CHOOSE_USER_ID, userId});\nexport const removeTodo = (todoId: number) => ({ type: REMOVE, todoId});\n\nexport const sortByInput = (inputChange: string) => ({ type: INPUT_CHANGE, inputChange});\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const isLoading = (state: RootState) => state.loading;\nexport const getIsLoaded = (state: RootState) => state.isLoaded;\nexport const getMessage = (state: RootState) => state.message;\n\nexport const getSort = (state: RootState) => state.sort;\nexport const getTodos = (state: RootState) => state.todos;\nexport const getUser = (state: RootState) => state.user;\n\nexport const getCheckedOnCompletedTodos = (state: RootState) => state.todoId;\nexport const setUserId = (state: RootState) => state.userId;\n\nexport const getInputChange = (state: RootState) => state.inputChange;\n\n// Initial state\nexport type RootState = {\n  loading: boolean;\n  isLoaded: boolean;\n  message: string;\n  sort: string;\n  todos: Todos[];\n  user: User | null;\n  todoId: number;\n  userId: number;\n  inputChange: string;\n};\n\nconst initialState: RootState = {\n  loading: false,\n  isLoaded: false,\n  message: '',\n  sort: '',\n  todos: [],\n  user: null,\n  todoId: 0,\n  userId: 0,\n  inputChange: '',\n};\n\n\nexport const getSortTodos = (state: RootState) => {\n    return [...state.todos].filter(\n      (todo) => {\n    switch (state.sort) {\n      case ALL:\n        return todo;\n\n      case COMPLETED:\n        return todo.completed;\n\n      case NOT_COMPLETED:\n        return !todo.completed;\n    \n      default:\n        return todo;\n    }\n    }).filter(todo =>todo.title !== null && todo.title.toLowerCase()\n  .includes(state.inputChange.toLowerCase()));\n  };\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return {\n        ...state,\n        loading: true,\n        isLoaded: false\n      };\n\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: [...action.todos]\n      };\n\n    case SET_USER:\n      return {\n        ...state,\n        user: {...action.user},\n      };\n\n    case SORT_TODOS:\n      return {\n        ...state,\n        sort: action.sort,\n      };\n\n    case RANDOMIZE:\n      return {\n        ...state,\n        todos: [...state.todos].sort(() => 0.5 - Math.random()),\n      };\n\n    case CHECK_ON_COMPLETED_TODOS:\n      return {\n        ...state,\n        todos: state.todos.map(todo => todo.id !== action.todoId \n          ? todo \n          : ({\n              ...todo,\n              completed: !todo.completed,\n            })\n        )\n      };\n\n    case CHOOSE_USER_ID:\n      return {\n        ...state,\n          userId: action.userId,\n      };\n\n    case INPUT_CHANGE:\n      return {\n        ...state,\n        inputChange: action.inputChange,\n      };\n\n    case REMOVE:\n      return {\n        ...state,\n        todos: [...state.todos].filter(todo => todo.id !== action.todoId) ,\n      };\n\n    case FINISH_LOADING:\n      return {\n        ...state,\n        loading: false,\n        isLoaded: true,\n        message: action.message,\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","// eslint-disable-next-line\nconst API_URL = `https://mate-api.herokuapp.com`;\n\nexport const todosFromServer = async() => {\n  const todos = fetch(`${API_URL}/todos`)\n    .then(promise => promise.json())\n    .then(result => result.data);\n\n  return todos;\n};\n\nexport const userFromServer = async(userId: number) => {\n  const user = fetch(`${API_URL}/users/${userId}`)\n    .then(promise => promise.json())\n    .then(result => result.data);\n\n  return user;\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { Todos } from '../interfaces';\nimport {\n  checkOnCompletedTodos,\n  chooseUserId,\n  setSort,\n  randomize,\n  removeTodo,\n  sortByInput,\n  getInputChange,\n  getSort,\n} from '../../store';\n\ntype TodoListProps = {\n  todos: Todos[];\n};\n\nexport const TodoList: React.FC<TodoListProps> = ({todos}) => {\n  const dispatch = useDispatch();\n\n  const selectOfTodos = [`COMPLETED`, `NOT_COMPLETED`];\n  const filterTitle = useSelector(getInputChange);\n  const selectSort = useSelector(getSort);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <div className=\"App__input\">\n        <label className=\"filterByTitle\">\n          <input\n            className=\"filterByTitle\"\n            type=\"text\"\n            name=\"filterTitle\"\n            placeholder=\"put name of todo\"\n            value={filterTitle}\n            onChange={event => dispatch(sortByInput(event.target.value))}\n          />\n          <span className=\"bar\" />\n        </label>\n\n      </div>\n      <div className=\"App__select\">\n\n        <label htmlFor=\"complite\">\n          Filter todos by select methods\n        </label>\n        <select\n          name=\"selectTodos\"\n          value={selectSort}\n          onChange={event => dispatch(setSort(event.target.value))}\n        >\n          <option value=\"ALL\">\n            ALL\n          </option>\n          {selectOfTodos.map(todo => (\n            <option\n              key={todo}\n              value={todo}\n            >\n              {todo}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div className=\"button__container\">\n              <button\n                className=\"button\"\n                type=\"button\"\n                onClick={() => dispatch(randomize())}\n              >\n                Randomize\n              </button>\n            </div>\n\n      <ul>\n        { todos.map(todo => (\n          <li\n            key={todo.id}\n            className={classNames(\n              'TodoList__item',\n              todo.completed\n                ? 'TodoList__item--checked'\n                : 'TodoList__item--unchecked',\n            )}\n          >\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                onChange={() => dispatch(checkOnCompletedTodos(todo.id))}\n                readOnly\n              />\n              <p>{todo.title}</p>\n            </label>\n            {todo.completed\n              ? (\n                <button\n                  className=\"TodoList__user-button button\"\n                  type=\"button\"\n                >\n                  User&nbsp;\n                  {todo.userId}\n                </button>\n              )\n              : (\n                <button\n                  className=\"\n                      TodoList__user-button\n                      TodoList__user-button--selected\n                      button\n                    \"\n                  type=\"button\"\n                  onClick={() => dispatch(chooseUserId(todo.userId))}\n                >\n                  User&nbsp;\n                  {todo.userId}\n                </button>\n              )\n            }\n            <button\n              className=\"beautiful.button\"\n                type=\"button\"\n                onClick={() => dispatch(removeTodo(todo.id))}\n              >\n                Remove\n              </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport './CurrentUser.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { chooseUserId, getUser,\n  setUser, setUserId } from '../../store';\n import { userFromServer } from '../api/api';\n\n\nexport const CurrentUser = () => {\n  const dispatch = useDispatch();\n  const user = useSelector(getUser);\n  const selectedUserId = useSelector(setUserId);\n\n  useEffect(() => {\n      const fetchUser = async() => {\n        const result = await userFromServer(selectedUserId);\n        dispatch(setUser(result));\n      };\n\n      fetchUser();\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {user !== null && selectedUserId\n        ? (\n          <>\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                {`Selected user:${user.id}`}\n              </span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n            <button\n              className=\"beautiful.button\"\n              type=\"button\"\n              onClick={() => dispatch(chooseUserId(0))}\n            >\n              Clear user details!\n            </button>\n          </>\n        )\n        : 'No user selected'}\n    </div>\n  );\n};\n\nexport default CurrentUser;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport './App.scss';\nimport { todosFromServer } from './components/api/api';\n\nimport {\n  startLoading,\n  finishLoading,\n  getIsLoaded,\n  setTodos,\n  getSortTodos,\n} from './store';\n\nimport { TodoList } from './components/TodoList/TodoList';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\n\nconst App = () => {\n  const dispatch = useDispatch();\n\n  const todos = useSelector(getSortTodos);\n  const isLoaded = useSelector(getIsLoaded);\n\n  const fetchTodos = async() => {\n    const result = await todosFromServer();\n    dispatch(startLoading());\n    dispatch(setTodos(result));\n    dispatch(finishLoading());\n  };\n\n  return (\n    <div className=\"App\">\n      {!isLoaded\n        ? (\n          <>\n            <button\n              type=\"button\"\n              className=\"App.beautiful.button\"\n              onClick={fetchTodos}\n            >\n              {'START LOADING!'}\n            </button>\n          </>\n        )\n        : (\n          <>\n            <div className=\"App__sidebar\">\n              <TodoList\n                todos={todos}\n              />\n            </div>\n\n            <div className=\"App__content\">\n              <div className=\"App__content-container\">\n                <CurrentUser\n                  />\n              </div>\n           </div>\n          </>\n        )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}