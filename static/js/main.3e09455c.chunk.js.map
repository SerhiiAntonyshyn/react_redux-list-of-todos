{"version":3,"sources":["store/index.ts","components/api/api.tsx","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["chooseUserId","userId","type","getIsLoaded","state","isLoaded","getSort","sort","getUser","user","setUserId","getInputChange","inputChange","initialState","loading","message","todos","todoId","getSortTodos","filter","todo","completed","title","toLowerCase","includes","store","createStore","action","Math","random","map","id","composeWithDevTools","applyMiddleware","thunk","API_URL","todosFromServer","a","fetch","then","promise","json","result","data","userFromServer","TodoList","dispatch","useDispatch","filterTitle","useSelector","selectSort","className","name","placeholder","value","onChange","event","target","htmlFor","key","onClick","classNames","checked","readOnly","dataFromServer","paramsOfData","CurrentUser","email","phone","App","selectedUserId","finishLoading","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3e09455c.chunk.js","sourcesContent":["import { createStore, AnyAction, applyMiddleware } from 'redux';\n\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { Todos, User } from '../components/interfaces';\n\n// Action types - is just a constant. MUST have a unique value.\nexport const START_LOADING = 'START_LOADING';\nexport const FINISH_LOADING = 'FINISH_LOADING';\nexport const SORT_TODOS = 'SORT_TODOS';\nexport const SET_TODOS = 'SET_TODOS';\nexport const SET_USER = 'SET_USER';\n\nexport const RANDOMIZE = 'RANDOMIZE';\nexport const ALL = 'ALL';\nexport const COMPLETED = 'COMPLETED';\nexport const NOT_COMPLETED = 'NOT_COMPLETED';\nexport const REMOVE = 'REMOVE';\n\nexport const CHOOSE_USER_ID = 'CHOOSE_USER_ID';\nexport const CHECK_ON_COMPLETED_TODOS = 'CHECK_ON_COMPLETED_TODOS';\nexport const INPUT_CHANGE = 'INPUT_CHANGE';\n\n// Action creators - a function returning an action object\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = (message = 'No message') => ({ type: FINISH_LOADING, message });\n\nexport const setSort = (sort: string) => ({ type: SORT_TODOS, sort});\n\nexport const setTodos = (todos: Todos[]) => ({ type: SET_TODOS, todos});\nexport const setUser = (user: User) => ({ type: SET_USER, user});\nexport const randomize = () => ({ type: RANDOMIZE });\n\nexport const checkOnCompletedTodos = (todoId: number) => ({ type: CHECK_ON_COMPLETED_TODOS, todoId});\nexport const chooseUserId = (userId: number) => ({ type: CHOOSE_USER_ID, userId});\nexport const removeTodo = (todoId: number) => ({ type: REMOVE, todoId});\n\nexport const sortByInput = (inputChange: string) => ({ type: INPUT_CHANGE, inputChange});\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const isLoading = (state: RootState) => state.loading;\nexport const getIsLoaded = (state: RootState) => state.isLoaded;\nexport const getMessage = (state: RootState) => state.message;\n\nexport const getSort = (state: RootState) => state.sort;\nexport const getTodos = (state: RootState) => state.todos;\nexport const getUser = (state: RootState) => state.user;\n\nexport const getCheckedOnCompletedTodos = (state: RootState) => state.todoId;\nexport const setUserId = (state: RootState) => state.userId;\n\nexport const getInputChange = (state: RootState) => state.inputChange;\n\n// Initial state\nexport type RootState = {\n  loading: boolean;\n  isLoaded: boolean;\n  message: string;\n  sort: string;\n  todos: Todos[];\n  user: User | null;\n  todoId: number;\n  userId: number;\n  inputChange: string;\n};\n\nconst initialState: RootState = {\n  loading: false,\n  isLoaded: false,\n  message: '',\n  sort: '',\n  todos: [],\n  user: null,\n  todoId: 0,\n  userId: 0,\n  inputChange: '',\n};\n\n\nexport const fetchTodo = (dataFromServer: any ) => {\n  return (dispatch: Function) => { \n    dataFromServer()\n      .then((data: Todos[]) => {\n        dispatch(setTodos(data));\n      })\n  }\n}\n\nexport const fetchUser = (dataFromServer: any, paramsOfData: number) => {\n  return (dispatch: Function) => { \n    dataFromServer(paramsOfData)\n      .then((data: User) => {\n        dispatch(setUser(data));\n        dispatch(chooseUserId(paramsOfData));\n      })\n  }\n}\n\nexport const getSortTodos = (state: RootState) => {\n  return [...state.todos].filter((todo) => {\n    switch (state.sort) {\n      case ALL:\n        return todo;\n\n      case COMPLETED:\n        return todo.completed;\n\n      case NOT_COMPLETED:\n        return !todo.completed;\n    \n      default:\n        return todo;\n    }\n  }).filter(todo =>todo.title !== null && todo.title.toLowerCase()\n  .includes(state.inputChange.toLowerCase()));\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return {\n        ...state,\n        loading: true,\n        isLoaded: false\n      };\n\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: [...action.todos]\n      };\n\n    case SET_USER:\n      return {\n        ...state,\n        user: {...action.user},\n      };\n\n    case SORT_TODOS:\n      return {\n        ...state,\n        sort: action.sort,\n      };\n\n    case RANDOMIZE:\n      return {\n        ...state,\n        todos: [...state.todos].sort(() => 0.5 - Math.random()),\n      };\n\n    case CHECK_ON_COMPLETED_TODOS:\n      return {\n        ...state,\n        todos: state.todos.map(todo => todo.id !== action.todoId \n          ? todo \n          : ({\n              ...todo,\n              completed: !todo.completed,\n            })\n        )\n      };\n\n    case CHOOSE_USER_ID:\n      return {\n        ...state,\n          userId: action.userId,\n      };\n\n    case INPUT_CHANGE:\n      return {\n        ...state,\n        inputChange: action.inputChange,\n      };\n\n    case REMOVE:\n      return {\n        ...state,\n        todos: [...state.todos].filter(todo => todo.id !== action.todoId) ,\n      };\n\n    case FINISH_LOADING:\n      return {\n        ...state,\n        loading: false,\n        isLoaded: true,\n        message: action.message,\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","// eslint-disable-next-line\nconst API_URL = `https://mate-api.herokuapp.com`;\n\nexport const todosFromServer = async() => {\n  const todos = fetch(`${API_URL}/todos`)\n    .then(promise => promise.json())\n    .then(result => result.data);\n\n  return todos;\n};\n\nexport const userFromServer = async(userId: number) => {\n  const user = fetch(`${API_URL}/users/${userId}`)\n    .then(promise => promise.json())\n    .then(result => result.data);\n\n  return user;\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { Todos } from '../interfaces';\nimport {\n  checkOnCompletedTodos,\n  setSort,\n  randomize,\n  removeTodo,\n  sortByInput,\n  getInputChange,\n  getSort,\n  fetchUser,\n} from '../../store';\nimport { userFromServer } from '../api/api';\n\ntype TodoListProps = {\n  todos: Todos[];\n};\n\nexport const TodoList: React.FC<TodoListProps> = ({todos}) => {\n  const dispatch = useDispatch();\n  \n\n  const selectOfTodos = [`COMPLETED`, `NOT_COMPLETED`];\n  const filterTitle = useSelector(getInputChange);\n  const selectSort = useSelector(getSort);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <div className=\"App__input\">\n        <label className=\"filterByTitle\">\n          <input\n            className=\"filterByTitle\"\n            type=\"text\"\n            name=\"filterTitle\"\n            placeholder=\"put name of todo\"\n            value={filterTitle}\n            onChange={event => dispatch(sortByInput(event.target.value))}\n          />\n          <span className=\"bar\" />\n        </label>\n\n      </div>\n      <div className=\"App__select\">\n\n        <label htmlFor=\"complite\">\n          Filter todos by select methods\n        </label>\n        <select\n          name=\"selectTodos\"\n          value={selectSort}\n          onChange={event => dispatch(setSort(event.target.value))}\n        >\n          <option value=\"ALL\">\n            ALL\n          </option>\n          {selectOfTodos.map(todo => (\n            <option\n              key={todo}\n              value={todo}\n            >\n              {todo}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div className=\"button__container\">\n              <button\n                className=\"button\"\n                type=\"button\"\n                onClick={() => dispatch(randomize())}\n              >\n                Randomize\n              </button>\n            </div>\n\n      <ul>\n        { todos.map(todo => (\n          <li\n            key={todo.id}\n            className={classNames(\n              'TodoList__item',\n              todo.completed\n                ? 'TodoList__item--checked'\n                : 'TodoList__item--unchecked',\n            )}\n          >\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                onChange={() => dispatch(checkOnCompletedTodos(todo.id))}\n                readOnly\n              />\n              <p>{todo.title}</p>\n            </label>\n            {todo.completed\n              ? (\n                <button\n                  className=\"TodoList__user-button button\"\n                  type=\"button\"\n                >\n                  User&nbsp;\n                  {todo.userId}\n                </button>\n              )\n              : (\n                <button\n                  className=\"\n                      TodoList__user-button\n                      TodoList__user-button--selected\n                      button\n                    \"\n                  type=\"button\"\n                  onClick={() => dispatch(fetchUser(userFromServer, todo.userId))}\n                >\n                  User&nbsp;\n                  {todo.userId}\n                </button>\n              )\n            }\n            <button\n              className=\"beautiful.button\"\n                type=\"button\"\n                onClick={() => dispatch(removeTodo(todo.id))}\n              >\n                Remove\n              </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { useDispatch } from 'react-redux';\nimport { chooseUserId } from '../../store';\nimport { User } from '../interfaces';\n\ntype CurrentUserProps = {\n  user: User;\n};\n\nexport const CurrentUser: React.FC<CurrentUserProps> = ({ user }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                {`Selected user:${user.id}`}\n              </span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n            <button\n              className=\"beautiful.button\"\n              type=\"button\"\n              onClick={() => dispatch(chooseUserId(0))}\n            >\n              Clear user details!\n            </button>\n    </div>\n  );\n};\n\nexport default CurrentUser;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport './App.scss';\nimport { todosFromServer } from './components/api/api';\n\nimport {\n  startLoading,\n  finishLoading,\n  getIsLoaded,\n  fetchTodo,\n  getSortTodos,\n  getUser,\n  setUserId,\n} from './store';\n\nimport { TodoList } from './components/TodoList/TodoList';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\n\nconst App = () => {\n  const dispatch = useDispatch();\n\n  const todos = useSelector(getSortTodos);\n  const isLoaded = useSelector(getIsLoaded);\n  const user = useSelector(getUser);\n  const selectedUserId = useSelector(setUserId);\n\n  const loadTodos = () => {\n    dispatch(startLoading());\n    dispatch(fetchTodo(todosFromServer));\n    dispatch(finishLoading());\n  };\n\n  return (\n    <div className=\"App\">\n      {!isLoaded\n        ? (\n          <>\n            <button\n              type=\"button\"\n              className=\"App.beautiful.button\"\n              onClick={loadTodos}\n            >\n              {'START LOADING!'}\n            </button>\n          </>\n        )\n        : (\n          <>\n            <div className=\"App__sidebar\">\n              <TodoList\n                todos={todos}\n              />\n            </div>\n\n            <div className=\"App__content\">\n              <div className=\"App__content-container\">\n              {user !== null && selectedUserId > 0 ? (\n                <CurrentUser\n                  user = {user}\n                />\n              )\n                : 'No user selected'}\n              </div>\n           </div>\n          </>\n        )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}