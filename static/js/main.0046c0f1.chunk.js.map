{"version":3,"sources":["store/loadingPage.tsx","store/sortTodos.tsx","store/setTodos.tsx","store/setUser.tsx","store/chooseUserId.tsx","store/inputChange.tsx","store/index.ts","components/api/api.tsx","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["reducer","loading","action","type","sort","todos","Math","random","map","todo","id","todoId","completed","filter","user","chooseUserId","userId","inputChange","rootReducer","combineReducers","loadingReducer","sortReducer","todosReducer","userReducer","userIdReducer","inputChangeReducer","isLoading","state","getSort","getUser","setUserId","getInputChange","getSortTodos","title","toLowerCase","includes","store","createStore","composeWithDevTools","applyMiddleware","thunk","API_URL","todosFromServer","a","fetch","then","promise","json","result","data","userFromServer","TodoList","dispatch","useDispatch","filterTitle","useSelector","selectSort","className","name","placeholder","value","onChange","event","sortByInput","target","htmlFor","key","onClick","classNames","checked","readOnly","dataFromServer","paramsOfData","CurrentUser","email","phone","App","selectedUserId","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0046c0f1.chunk.js","sourcesContent":["import { AnyAction } from 'redux';\n\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\nconst reducer = (loading = false, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return false;\n    case FINISH_LOADING:\n      return true;\n\n    default:\n      return loading;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst SORT_TODOS = 'SORT_TODOS';\n\nexport const setSort = (sort: string) => ({ type: SORT_TODOS, sort});\n\nconst reducer = (sort = '', action: AnyAction) => {\n  switch (action.type) {\n    case SORT_TODOS:\n      return action.sort;\n\n    default:\n      return sort;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\nimport { Todos } from '../components/interfaces';\n\nconst SET_TODOS = 'SET_TODOS';\nconst RANDOMIZE = 'RANDOMIZE';\nconst CHECK_ON_COMPLETED_TODOS = 'CHECK_ON_COMPLETED_TODOS';\nconst REMOVE = 'REMOVE';\n\nexport const setTodos = (todos: Todos[]) => ({ type: SET_TODOS, todos});\nexport const randomize = () => ({ type: RANDOMIZE });\nexport const checkOnCompletedTodos = (todoId: number) => ({ type: CHECK_ON_COMPLETED_TODOS, todoId});\nexport const removeTodo = (todoId: number) => ({ type: REMOVE, todoId});\n\nconst reducer = (todos = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_TODOS:\n      return action.todos;\n\n    case RANDOMIZE:\n      return [...todos].sort(() => 0.5 - Math.random());\n\n    case CHECK_ON_COMPLETED_TODOS:\n      return todos.map((todo: any) => todo.id !== action.todoId\n        ? todo\n        : ({\n          ...todo,\n          completed: !todo.completed,\n        })\n      )\n\n    case REMOVE:\n      return [...todos].filter((todo: Todos) => todo.id !== action.todoId);\n\n    default:\n      return todos;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\nimport { User } from '../components/interfaces';\n\nconst SET_USER = 'SET_USER';\n\nexport const setUser = (user: User) => ({ type: SET_USER, user});\n\nconst reducer = (user = null, action: AnyAction) => {\n  switch (action.type) {\n    case SET_USER:\n      return action.user;\n\n    default:\n      return user;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst CHOOSE_USER_ID = 'CHOOSE_USER_ID';\n\nexport const chooseUserId = (userId: number) => ({ type: CHOOSE_USER_ID, userId});\n\nconst reducer = (userId = 0, action: AnyAction) => {\n  switch (action.type) {\n    case CHOOSE_USER_ID:\n      return action.userId;\n\n    default:\n      return userId;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst INPUT_CHANGE = 'INPUT_CHANGE';\n\nexport const sortByInput = (inputChange: string) => ({ type: INPUT_CHANGE, inputChange});\n\nconst reducer = (inputChange = '', action: AnyAction) => {\n  switch (action.type) {\n    case INPUT_CHANGE:\n      return action.inputChange;\n\n    default:\n      return inputChange;\n  }\n};\n\nexport default reducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport { Todos, User } from '../components/interfaces';\n\nimport loadingReducer from './loadingPage';\nimport sortReducer from './sortTodos';\nimport todosReducer, { setTodos } from './setTodos';\nimport userReducer, { setUser } from './setUser';\nimport userIdReducer, { chooseUserId } from './chooseUserId';\nimport inputChangeReducer from './inputChange';\n\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  sort: sortReducer,\n  todos: todosReducer,\n  user: userReducer,\n  userId: userIdReducer,\n  inputChange: inputChangeReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const isLoading = (state: RootState) => state.loading;\nexport const getSort = (state: RootState) => state.sort;\nexport const getTodos = (state: RootState) => state.todos;\nexport const getUser = (state: RootState) => state.user;\nexport const setUserId = (state: RootState) => state.userId;\nexport const getInputChange = (state: RootState) => state.inputChange;\n\nconst ALL = 'ALL';\nconst COMPLETED = 'COMPLETED';\nconst NOT_COMPLETED = 'NOT_COMPLETED';\n\nexport const fetchTodo = (dataFromServer: any ) => {\n  return (dispatch: Function) => { \n    dataFromServer()\n      .then((data: Todos[]) => {\n        dispatch(setTodos(data));\n      })\n  }\n}\n\nexport const fetchUser = (dataFromServer: any, paramsOfData: number) => {\n  return (dispatch: Function) => { \n    dataFromServer(paramsOfData)\n      .then((data: User) => {\n        dispatch(setUser(data));\n        dispatch(chooseUserId(paramsOfData));\n      })\n  }\n}\n\nexport const getSortTodos = (state: RootState) => {\n  return [...state.todos].filter((todo) => {\n    switch (state.sort) {\n      case ALL:\n        return todo;\n\n      case COMPLETED:\n        return todo.completed;\n\n      case NOT_COMPLETED:\n        return !todo.completed;\n    \n      default:\n        return todo;\n    }\n  }).filter(todo =>todo.title !== null && todo.title.toLowerCase()\n  .includes(state.inputChange.toLowerCase()));\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","const API_URL = `https://mate-api.herokuapp.com`;\n\nexport const todosFromServer = async() => {\n  const todos = fetch(`${API_URL}/todos`)\n    .then(promise => promise.json())\n    .then(result => result.data);\n\n  return todos;\n};\n\nexport const userFromServer = async(userId: number) => {\n  const user = fetch(`${API_URL}/users/${userId}`)\n    .then(promise => promise.json())\n    .then(result => result.data);\n\n  return user;\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { Todos } from '../interfaces';\nimport { getInputChange, getSort, fetchUser } from '../../store';\nimport { sortByInput } from '../../store/inputChange';\nimport { randomize, checkOnCompletedTodos, removeTodo } from '../../store/setTodos';\nimport { setSort } from '../../store/sortTodos';\nimport { userFromServer } from '../api/api';\n\ntype TodoListProps = {\n  todos: Todos[];\n};\n\nexport const TodoList: React.FC<TodoListProps> = ({todos}) => {\n  const dispatch = useDispatch();\n  const selectOfTodos = [`COMPLETED`, `NOT_COMPLETED`];\n  const filterTitle = useSelector(getInputChange);\n  const selectSort = useSelector(getSort);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <div className=\"App__input\">\n        <label className=\"TodoList__label\">\n          <input\n            className=\"TodoList__filterByTitle\"\n            type=\"text\"\n            name=\"filterTitle\"\n            placeholder=\"put name of todo\"\n            value={filterTitle}\n            onChange={event => dispatch(sortByInput(event.target.value))}\n          />\n          <span className=\"bar\" />\n        </label>\n\n      </div>\n      <div className=\"App__select\">\n        <label htmlFor=\"complite\">\n          Filter todos by select methods\n        </label>\n        <select\n          name=\"selectTodos\"\n          value={selectSort}\n          onChange={event => dispatch(setSort(event.target.value))}\n        >\n          <option value=\"ALL\">\n            ALL\n          </option>\n          {selectOfTodos.map(todo => (\n            <option\n              key={todo}\n              value={todo}\n            >\n              {todo}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div className=\"button__container\">\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={() => dispatch(randomize())}\n        >\n          Randomize\n        </button>\n      </div>\n\n      <ul>\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className={classNames(\n              'TodoList__item',\n              todo.completed\n                ? 'TodoList__item--checked'\n                : 'TodoList__item--unchecked',\n            )}\n          >\n            <label>\n              <input\n                className=\"TodoList__input\"\n                type=\"checkbox\"\n                checked={todo.completed}\n                onChange={() => dispatch(checkOnCompletedTodos(todo.id))}\n                readOnly\n              />\n              <p>{todo.title}</p>\n            </label>\n            {todo.completed\n              ? (\n                <button\n                  className=\"TodoList__user-button button\"\n                  type=\"button\"\n                >\n                  User&nbsp;\n                  {todo.userId}\n                </button>\n              )\n              : (\n                <button\n                  className=\"\n                      TodoList__user-button\n                      TodoList__user-button--selected\n                      button\n                    \"\n                  type=\"button\"\n                  onClick={() => dispatch(fetchUser(userFromServer, todo.userId))}\n                >\n                  User&nbsp;\n                  {todo.userId}\n                </button>\n              )\n            }\n            <button\n              className=\"TodoList__beautiful-button\"\n              type=\"button\"\n              onClick={() => dispatch(removeTodo(todo.id))}\n            >\n              Remove\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { useDispatch } from 'react-redux';\nimport { User } from '../interfaces';\nimport { chooseUserId } from '../../store/chooseUserId';\n\ntype CurrentUserProps = {\n  user: User;\n};\n\nexport const CurrentUser: React.FC<CurrentUserProps> = ({ user }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          {`Selected user:${user.id}`}\n        </span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{user.name}</h3>\n      <p className=\"CurrentUser__email\">{user.email}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n      <button\n        className=\"beautiful.button\"\n        type=\"button\"\n        onClick={() => dispatch(chooseUserId(0))}\n      >\n        Clear user details!\n      </button>\n    </div>\n  );\n};\n\nexport default CurrentUser;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport './App.scss';\nimport { todosFromServer } from './components/api/api';\n\nimport { TodoList } from './components/TodoList/TodoList';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\nimport { getSortTodos, isLoading, getUser, setUserId, fetchTodo } from './store';\nimport { startLoading, finishLoading } from './store/loadingPage';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector(getSortTodos);\n  const loading = useSelector(isLoading);\n  const user = useSelector(getUser);\n  const selectedUserId = useSelector(setUserId);\n\n  const loadTodos = () => {\n    dispatch(startLoading());\n    dispatch(fetchTodo(todosFromServer));\n    dispatch(finishLoading());\n  };\n  return (\n    <div className=\"App\">\n      {!loading\n        ? (\n          <div className=\"App__download\">\n            <button\n              type=\"button\"\n              className=\"App__beautiful-button\"\n              onClick={loadTodos}\n            >\n              {'START LOADING!'}\n            </button>\n          </div>\n        )\n        : (\n          <>\n            <div className=\"App__sidebar\">\n              <TodoList\n                todos={todos}\n              />\n            </div>\n\n            <div className=\"App__content\">\n              <div className=\"App__content-container\">\n              {user !== null && selectedUserId ? (\n                <CurrentUser\n                  user = {user}\n                />\n              )\n                : 'No user selected'}\n              </div>\n           </div>\n          </>\n        )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}